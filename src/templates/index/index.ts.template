import { Icons } from "./types";
import { meta } from "../../build/meta/icons";

<% files.forEach(function(file,index) { %>
import <%= file.componentName %> from "./<%= file.name %>.vue";<% }); 
-%>


export const getIcon = (icon: Icons)=>{
    switch(icon){
    <% files.forEach(function(file,index) { %>
        case Icons.<%= upperSnakeCase(file.name) %>:
            return <%= file.componentName %>;
    <% }); -%>

        default: 
            return null;
    }
}

const findIt = (needle: string | string[], haystack: string | string[]): boolean => {

    const needles = (Array.isArray(needle) ? needle : [needle]).map((str) => str.toLowerCase());
    const haystacks = (Array.isArray(haystack) ? haystack : [haystack]).map((str) => str.toLowerCase());

    return needles.some(n => haystacks.some(h => h.includes(n)));
}



export const searchIcon = (term: string, searchIn: 'name' | 'category' | 'tag' | 'description' | undefined = undefined): {
    id: string;
    name: string;
    title: string;
    category: string[];
    tag: string[];
    description: string;
}[] | undefined => {

    const mergedIcons = Object.keys(Icons).map((key) => {
        const value = Icons[key as keyof typeof Icons];
        const metaData = meta[key as keyof typeof Icons];
        return {
            id: key,
            name: value,
            ...metaData
        }
    });
    return mergedIcons.filter((icon) => {
        if (searchIn) {
            // If searchIn is provided, search in the specified field
            return findIt(term, icon[searchIn as keyof typeof icon]);
        } else {
            // If searchIn is not provided, search in all fields
            return ['name', 'category', 'tag', 'description', 'title'].some(field => findIt(term, icon[field as keyof typeof icon]));
        }
    });

}



export {
    Icons,
    <% files.forEach(function(file,index) { %><%= file.componentName %>,
    <% }); -%>
}


