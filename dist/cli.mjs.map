{"version":3,"sources":["../package.json","../src/cli.ts","../src/get/icons.ts","../src/get/styles.ts","../src/helpers/index.ts","../src/helpers/helpers.ts","../src/get/templates.ts","../src/build/build.ts","../src/settings/settings.ts","../src/build/copy.ts","../src/list/list.ts"],"sourcesContent":["{\n\t\"name\": \"icon-components\",\n\t\"version\": \"1.9.14\",\n\t\"description\": \"Generate Icon Components\",\n\t\"main\": \"index.js\",\n\t\"bin\": \"dist/cli.js\",\n\t\"scripts\": {\n\t\t\"test\": \"npm run build && npm run test:jest && npm run test:all\",\n\t\t\"test:jest\": \"jest --verbose\",\n\t\t\"test:external\": \"sh test/scripts/external.sh\",\n\t\t\"test:lists\": \"sh test/scripts/lists.sh\",\n\t\t\"test:templates\": \"sh test/scripts/templates.sh\",\n\t\t\"test:cleanup\": \"sh test/scripts/cleanup.sh\",\n\t\t\"test:copy\": \"sh test/scripts/copy.sh\",\n\t\t\"test:prependline\": \"sh test/scripts/prependLine.sh\",\n\t\t\"test:iconfolder\": \"sh test/scripts/iconFolder.sh\",\n\t\t\"test:all\": \"npm run test:lists && npm run test:templates && npm run test:cleanup && npm run test:external && npm run test:copy && npm run test:prependline && npm run test:iconfolder\",\n\t\t\"build\": \"tsup\",\n\t\t\"lint\": \"eslint --ext .js,.ts --ignore-path .gitignore .\",\n\t\t\"lint:fix\": \"eslint --ext .js,.ts --ignore-path .gitignore . --fix\",\n\t\t\"docs\": \"npx gieter\",\n\t\t\"docs:local\": \"node ../gieter/dist/index.js\",\n\t\t\"dev\": \"tsc -w\",\n\t\t\"prepublishOnly\": \"npm run test\"\n\t},\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"git+https://github.com/silvandiepen/icon-components.git\"\n\t},\n\t\"keywords\": [\n\t\t\"icons\",\n\t\t\"svg\",\n\t\t\"components\",\n\t\t\"generate\"\n\t],\n\t\"author\": \"Sil van Diepen\",\n\t\"license\": \"MIT\",\n\t\"bugs\": {\n\t\t\"url\": \"https://github.com/silvandiepen/icon-components/issues\"\n\t},\n\t\"homepage\": \"https://github.com/silvandiepen/icon-components#readme\",\n\t\"dependencies\": {\n\t\t\"@sil/case\": \"^0.0.3\",\n\t\t\"cli-block\": \"^1.3.8\",\n\t\t\"ejs\": \"^3.1.8\",\n\t\t\"kleur\": \"^4.1.5\",\n\t\t\"mkdirp\": \"^1.0.4\",\n\t\t\"prettier\": \"^2.7.1\",\n\t\t\"rimraf\": \"^3.0.2\",\n\t\t\"svgo\": \"^2.8.0\",\n\t\t\"yargs\": \"^17.5.1\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@types/ejs\": \"^3.1.1\",\n\t\t\"@types/jest\": \"^28.1.6\",\n\t\t\"@types/node\": \"^18.6.2\",\n\t\t\"@types/svgo\": \"^2.6.3\",\n\t\t\"@typescript-eslint/eslint-plugin\": \"^5.31.0\",\n\t\t\"@typescript-eslint/parser\": \"^5.31.0\",\n\t\t\"@zerollup/ts-transform-paths\": \"^1.7.18\",\n\t\t\"chai\": \"^4.3.6\",\n\t\t\"eslint\": \"^8.20.0\",\n\t\t\"eslint-config-prettier\": \"^8.5.0\",\n\t\t\"eslint-plugin-import\": \"^2.26.0\",\n\t\t\"eslint-plugin-prettier\": \"^4.2.1\",\n\t\t\"jest\": \"^28.1.3\",\n\t\t\"ts-jest\": \"^28.0.7\",\n\t\t\"ts-node\": \"^10.9.2\",\n\t\t\"tsc-alias\": \"^1.8.8\",\n\t\t\"tslint\": \"^6.1.1\",\n\t\t\"tsup\": \"^8.0.2\",\n\t\t\"typescript\": \"^4.7.4\"\n\t},\n\t\"engines\": {\n\t\t\"npm\": \">=7.0.0\",\n\t\t\"node\": \">=16.0.0\"\n\t}\n}\n","#!/usr/bin/env node\nimport rimraf from 'rimraf';\nimport { blockFooter } from 'cli-block';\n\nimport { getData } from '@/get';\nimport { buildFiles, copyFiles } from '@/build';\nimport { createListType } from '@/list';\n\nimport { settings } from '@/settings';\n\n// If remove old is set, the destination folder will be removed in order to be sure all files are new.\n() => {\n\tsettings().removeOld &&\n\t\trimraf(settings().dest + '/*', () => {\n\t\t\tconsole.log('Cleaned destination folder');\n\t\t});\n};\n\ngetData(settings())\n\t.then(buildFiles)\n\t.then(async (s) => {\n\t\tawait createListType(s, 'list');\n\t\tawait createListType(s, 'index');\n\t\tawait createListType(s, 'types');\n\t\tif (s.copy.length > 0) await copyFiles(s);\n\t})\n\t.then(() => {\n\t\tblockFooter('Done!');\n\t});\n","import { join, basename, extname } from 'path';\nimport { blockLineError } from 'cli-block';\nconst fs = require('fs').promises;\nimport { kebabCase, PascalCase } from '@sil/case';\n\nimport { getStyles, getStyleData } from '@/get/styles';\nimport { SettingsType, FilesType, FilesDataType } from '@/types';\nimport {\n\tasyncForEach,\n\tfileName,\n\tprefixedName,\n\tasyncRemoveAttrs,\n\tremoveStyle,\n\tasyncRemoveTags,\n\tsvgOnly,\n\tgetAttrData,\n\tremoveFix\n} from '@/helpers';\nimport { getFileTemplates } from '@/get/templates';\n\nexport const getData = async (\n\tsettings: SettingsType\n): Promise<SettingsType> => {\n\tsettings = await getStyles(settings);\n\tsettings = await getFiles(settings);\n\treturn settings;\n};\n\nexport const getFiles = async (\n\tsettings: SettingsType\n): Promise<SettingsType> => {\n\ttry {\n\t\tlet files = await getFileList(settings).then((result) => result);\n\n\t\tconst templates = await getFileTemplates(settings).then((result) => result);\n\n\t\tif (settings.filter) files = files.filter((file) => file.name.includes(settings.filter));\n\n\t\treturn { ...settings, files: files, templates: templates };\n\t} catch (err) {\n\t\tconsole.log(err);\n\t}\n};\n\nexport const getFileData = async (filedata: FilesDataType, srcFileName: string) => {\n\ttry {\n\t\treturn fs.readFile(join(filedata.src, srcFileName)).then((file) => {\n\t\t\treturn file.toString();\n\t\t});\n\t} catch (err) {\n\t\tconsole.warn(err);\n\t}\n};\n\n/*\n  Get A list of all the files and their data. \n*/\nexport const getSizes = (file: string): { width: number; height: number } => {\n\tconst viewBox: string[] = getAttrData(file, 'viewbox')\n\t\t.replace(/[^\\d. ]/g, '')\n\t\t.split(' ');\n\n\tif (viewBox.length !== 4) {\n\t\tblockLineError('Some file does not have a viewbox');\n\t}\n\treturn {\n\t\twidth: parseInt(viewBox[2], 10),\n\t\theight: parseInt(viewBox[3], 10)\n\t};\n};\n\n\n\nexport const getFileList = async (\n\tsettings: SettingsType\n): Promise<FilesType[]> => {\n\tlet files = await fs.readdir(settings.src);\n\tlet filelist = [];\n\n\tawait asyncForEach(files, async (file: string) => {\n\t\tif (extname(file) !== '.svg') return;\n\n\t\tconst fileData = await getFileData(settings, file).then(svgOnly);\n\t\tconst fileData__clean_attrs = await asyncRemoveAttrs(\n\t\t\tsettings.svgOnly ? svgOnly(fileData) : fileData,\n\t\t\tsettings.removeAttrs\n\t\t);\n\n\t\tconst fileData__clean_tags = await asyncRemoveTags(\n\t\t\tsettings.svgOnly ? svgOnly(fileData) : fileData,\n\t\t\tsettings.removeTags\n\t\t);\n\n\t\tconst fileData__clean_both = await asyncRemoveTags(\n\t\t\tfileData__clean_attrs,\n\t\t\tsettings.removeTags\n\t\t);\n\n\t\tconst name = removeFix(kebabCase(fileName(file)), settings);\n\t\tconst style = getStyleData(settings, name, fileData);\n\n\t\tconst { width, height } = getSizes(fileData);\n\n\t\tfile = removeFix(file, settings);\n\n\t\tfilelist.push({\n\t\t\tog_name: file,\n\t\t\tname,\n\t\t\ttitle: PascalCase(basename(file)),\n\t\t\ttitle_lowercase: basename(file).toLowerCase(),\n\t\t\tfileName: prefixedName(file, settings.prefix),\n\t\t\tcomponentName: PascalCase(prefixedName(file, settings.prefix)),\n\t\t\tdata: settings.removeStyle ? removeStyle(fileData) : fileData,\n\t\t\tdata_clean: {\n\t\t\t\tattrs: settings.removeStyle\n\t\t\t\t\t? removeStyle(fileData__clean_attrs)\n\t\t\t\t\t: fileData__clean_attrs,\n\t\t\t\ttags: settings.removeStyle\n\t\t\t\t\t? removeStyle(fileData__clean_tags)\n\t\t\t\t\t: fileData__clean_tags,\n\t\t\t\tboth: settings.removeStyle\n\t\t\t\t\t? removeStyle(fileData__clean_both)\n\t\t\t\t\t: fileData__clean_both\n\t\t\t},\n\t\t\twidth,\n\t\t\theight,\n\t\t\tstyle\n\t\t});\n\t});\n\treturn filelist;\n};\n","const fs = require('fs').promises;\nimport { join, extname } from 'path';\nimport { kebabCase } from '@sil/case';\n\nimport { SettingsType, StyleFilesType } from '@/types';\nimport { asyncForEach, fileName, getTagData, dirExist, removeFix } from '@/helpers';\n\nexport const getStyleData = (\n\tsettings: SettingsType,\n\tname: string,\n\tfiledata: string\n): { data: string; ext: string } => {\n\tconst tagData = getTagData(filedata, 'style');\n\tconst cssFile = settings.styles\n\t\t? settings.styles.find((style) => style.name === name)\n\t\t: null;\n\n\treturn {\n\t\tdata: tagData + (cssFile ? cssFile.data : ''),\n\t\t// ext: cssFile.extension || 'css',\n\t\text: 'css'\n\t};\n};\n\nexport const getStyleFileList = async (\n\tsettings: SettingsType\n): Promise<StyleFilesType[]> => {\n\tconst fileDirectory = settings.styleDir ? settings.styleDir : settings.src;\n\n\tif (!dirExist(fileDirectory)) return [];\n\n\tconst files = await fs.readdir(fileDirectory);\n\tconst filelist = [];\n\n\tawait asyncForEach(files, async (file: string) => {\n\t\tif (!['.css', '.scss', '.sass', '.less', '.stylus'].includes(extname(file)))\n\t\t\treturn;\n\n\t\tconst fileData = await fs.readFile(join(fileDirectory, file)).then((f) => {\n\t\t\treturn f.toString();\n\t\t});\n\n\t\tfilelist.push({\n\t\t\tname: removeFix(kebabCase(fileName(file)),settings),\n\t\t\textension: extname(file),\n\t\t\tdata: fileData || ''\n\t\t});\n\t});\n\treturn filelist;\n};\n\nexport const getStyles = async (\n\tsettings: SettingsType\n): Promise<SettingsType> => {\n\ttry {\n\t\tconst styles = await getStyleFileList(settings).then((result) => result);\n\t\treturn { ...settings, styles: styles };\n\t} catch (err) {\n\t\tconsole.log(err);\n\t}\n};\n","export * from './helpers';\n","import path from 'path';\nconst { mkdir } = require('fs').promises;\nimport { existsSync } from 'fs';\n\nimport { format } from 'prettier';\nimport { kebabCase, upperSnakeCase } from '@sil/case';\nimport { SettingsType } from '@/types';\n\nexport const WAIT = async (time: number = 0) => {\n\treturn new Promise((resolve) => {\n\t\tsetTimeout(() => {\n\t\t\tresolve('resolved');\n\t\t}, time);\n\t});\n};\n\nexport const asyncForEach = async (array: any, callback: any) => {\n\tfor (let index = 0; index < array.length; index++) {\n\t\tawait callback(array[index], index, array);\n\t}\n};\n\nexport const fileName = (str: string, settings = null) => {\n\tif (settings)\n\t\treturn `${settings.prefix}${path\n\t\t\t.basename(str)\n\t\t\t.replace('.template', '')\n\t\t\t.replace(path.extname(str), '')}`;\n\telse\n\t\treturn `${path\n\t\t\t.basename(str)\n\t\t\t.replace('.template', '')\n\t\t\t.replace(path.extname(str), '')}`;\n};\n\nconst tagsRegex = (tag: string): any =>\n\tnew RegExp(`<[\\/]{0,1}(${tag}|${tag})[^><]*>`, 'g');\n\nexport const removeTags = (str: string, tags: Array<string>): string => {\n\ttags.forEach((tag) => {\n\t\tstr = str.replace(tagsRegex(tag), '');\n\t});\n\treturn str;\n};\n\nexport const asyncRemoveTags = async (\n\tstr: string,\n\ttags: Array<string>\n): Promise<string> => {\n\tawait asyncForEach(tags, (tag: string) => {\n\t\tstr = str.replace(tagsRegex(tag), '');\n\t});\n\treturn str;\n};\n\nconst attrRegex = (attr: string): any => new RegExp(` ${attr}=\"[^\"]*\"`, 'gi');\n\nexport const removeAttrs = (str: string, attrs: Array<string>): string => {\n\tattrs.forEach((attr) => {\n\t\tstr = str.replace(attrRegex(attr), '');\n\t});\n\treturn str;\n};\n\nexport const asyncRemoveAttrs = async (\n\tstr: string,\n\tattrs: Array<string>\n): Promise<string> => {\n\tawait asyncForEach(attrs, (attr: string) => {\n\t\tstr = str.replace(attrRegex(attr), '');\n\t});\n\treturn str;\n};\n\nexport const removeStyle = (str: string): string => {\n\treturn str.replace(/<style.*?>.*?<\\/style>/ig, '');\n}\n\nexport const svgOnly = (str: string): string => {\n\treturn str.substring(\n\t\tstr.indexOf('<svg'),\n\t\tstr.indexOf('</svg>') + '</svg>'.length\n\t);\n};\n\nexport const prefixedName = (name: string, prefix: string): string => {\n\tif (prefix === '') return kebabCase(fileName(name));\n\treturn prefix\n\t\t? `${prefix}-${kebabCase(fileName(name))}`\n\t\t: `icon-${kebabCase(fileName(name))}`;\n};\n\nexport const getExtension = (file: string) => {\n\tlet names = path.basename(file.replace('.template', '')).split('.');\n\tnames[0] = '';\n\treturn names.join('.');\n};\n\nexport const fixJsx = (str: string): string => {\n\treturn str\n\t\t.replaceAll('fill-rule', 'fillRule')\n\t\t.replaceAll('clip-rule', 'clipRule')\n\t\t.replace('xlink:href', 'xlinkHref')\n\t\t.replace('xmlns:xlink', 'xmlnsXlink');\n};\n\nexport const createAFolder = async (dir: string): Promise<void> => {\n\ttry {\n\t\tawait mkdir(dir, {\n\t\t\trecursive: true,\n\t\t\tmode: 0o775\n\t\t});\n\t} catch (error) {\n\t\tconsole.log(`error creating folder ${dir}`);\n\t}\n\treturn;\n};\n\nexport const getTagData = (str: string, tag: string): string => {\n\tconst regex = new RegExp(`<${tag}>(.|\\n)*?<\\/${tag}>`, 'gi');\n\tconst matches = str.match(regex);\n\n\treturn matches ? removeTags(matches[0], [tag]) : '';\n};\n\nexport const getAttrData = (str: string, tag: string): string => {\n\tconst regex = new RegExp(`${tag}=\"(.|\\n)*?\"`, 'gi');\n\tconst matches = str.match(regex);\n\n\treturn matches ? removeTags(matches[0], [tag]) : '';\n};\n\nexport const formatFile = (str: string, ext: string) => {\n\tlet parserFormat: string = null;\n\n\tconst allowed = [\n\t\t'scss',\n\t\t'css',\n\t\t'less',\n\t\t'graphql',\n\t\t'html',\n\t\t'vue',\n\t\t'yaml',\n\t\t'mdx'\n\t];\n\n\tif (allowed.includes(ext)) {\n\t\tparserFormat = ext;\n\t} else {\n\t\tswitch (ext) {\n\t\t\tcase 'js':\n\t\t\tcase 'jsx':\n\t\t\t\tparserFormat = 'babel';\n\t\t\t\tbreak;\n\t\t\tcase 'ts':\n\t\t\tcase 'tsx':\n\t\t\t\tparserFormat = 'typescript';\n\t\t\t\tbreak;\n\t\t\tcase 'json':\n\t\t\t\tparserFormat = 'json5';\n\t\t\t\tbreak;\n\t\t\tcase 'md':\n\t\t\t\tparserFormat = 'markdown';\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn parserFormat ? format(str, { parser: parserFormat }) : str;\n};\n\nexport const dirExist = (dir: string): boolean => {\n\ttry {\n\t\treturn existsSync(dir);\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\n\n\nexport const CONST_CASE = (str: string): string => {\n\tconst ConvertedString = upperSnakeCase(str);\n\t// Check if the first character is a number, in that case we need to return the string with a _ in front. \n\tif (!isNaN(parseInt(ConvertedString.charAt(0)))) {\n\t\treturn `_${ConvertedString}`;\n\t}\n\treturn ConvertedString;\n\n}\n\n\n\nexport const removeFix = (str: string, settings: SettingsType): string => {\n\t// Remove settings.removePrefix from the start of the file name\n\tif (str.startsWith(settings.removePrefix)) {\n\t\tstr = str.replace(settings.removePrefix, '');\n\t}\n\tif (str.endsWith(settings.removeAffix)) {\n\t\tstr = str.replace(settings.removeAffix, '');\n\t}\n\tif (str.includes(settings.removeString)) {\n\t\tstr = str.replace(settings.removeString, '');\n\t}\n\treturn str;\n}","import path from 'path';\nconst fs = require('fs').promises;\nimport { SettingsType, TemplateFileType } from '@/types';\nimport { asyncForEach } from '@/helpers';\n\n/*\n  When there is no Template given, but a type. The templates will be gotten from the package.\n*/\n\n// const getLocalTemplates = async (\n// \tsettings: SettingsType\n// ): Promise<TemplateFileType[]> => {\n// \tif (!settings.type) return;\n\n// \tlet templates: any = [];\n// \ttry {\n// \t\tlet localTemplateDir = await fs.readdir(\n// \t\t\tpath.join(__dirname, '../../src/templates', settings.type)\n// \t\t);\n\n// \t\tawait asyncForEach(localTemplateDir, async (template: string) => {\n// \t\t\tlet fileData = await fs.readFile(\n// \t\t\t\tpath.join(__dirname, '../../src/templates/', settings.type, template)\n// \t\t\t);\n// \t\t\ttemplates.push({\n// \t\t\t\tfile: template,\n// \t\t\t\tdata: fileData.toString()\n// \t\t\t});\n// \t\t});\n// \t\treturn templates;\n// \t} catch (err) {\n// \t\tconsole.error('Type does not exist');\n// \t}\n// };\n\n/*\n  Get all templates.\n*/\n\nexport const getFileTemplates = async (\n\tsettings: SettingsType\n): Promise<TemplateFileType[]> => {\n\tif (settings.template == null) {\n\t\tconsole.error('You need to define a template');\n\t\t// return await getLocalTemplates(settings);\n\t\tsettings.template = 'src/templates/default';\n\t}\n\n\tlet templates = [];\n\n\tconst stats = await fs.lstat(settings.template);\n\tif (stats.isDirectory()) {\n\t\tlet templateFiles = await fs.readdir(settings.template);\n\n\t\tawait asyncForEach(templateFiles, async (template: string) => {\n\t\t\tlet fileData = await fs.readFile(path.join(settings.template, template));\n\t\t\ttemplates.push({\n\t\t\t\tfile: template,\n\t\t\t\tdata: fileData.toString()\n\t\t\t});\n\t\t});\n\t} else {\n\t\tlet fileData = await fs.readFile(\n\t\t\tpath.join(settings.template)\n\t\t\t// path.join(__dirname, '../../', settings.template)\n\t\t);\n\t\ttemplates.push({\n\t\t\tfile: settings.template,\n\t\t\tdata: fileData.toString()\n\t\t});\n\t}\n\treturn templates;\n};\n","import { join, dirname } from 'path';\nconst { mkdir, stat, writeFile } = require('fs').promises;\nimport { render } from 'ejs';\nimport { kebabCase, PascalCase } from '@sil/case';\nimport { CONST_CASE } from '@/helpers';\n\n\n\nimport {\n\tred, yellow, blue, bold,\n\tblockHeader,\n\tblockLineError,\n\tblockLineSuccess,\n\tblockMid,\n\tblockRowLine,\n\tblockSettings\n} from 'cli-block';\n\nimport { defaultSettings } from '@/settings';\n\nimport * as helpers from '@/helpers';\nimport {\n\tfileName,\n\tasyncForEach,\n\tgetExtension,\n\tWAIT,\n\tcreateAFolder,\n\tformatFile\n} from '@/helpers';\n\nimport {\n\tSettingsType,\n\tFilesType,\n\tTemplateFileType,\n\tWriteFileType\n} from '@/types';\n\nconst packageJson = require('../../package.json');\n\n/*\n\n\tCreate the path if it doesn't exist.\n\n\t*/\nconst makePath = async (filePath: string) => {\n\tconst directoryName = dirname(filePath);\n\tif ((await stat(directoryName)).isDirectory()) {\n\t\treturn true;\n\t}\n\tmkdir(directoryName);\n};\n\n/*\n\n\tWrite the file\n\n\t*/\n\nexport const writeAFile = async (\n\tsettings: SettingsType,\n\tfile: WriteFileType\n) => {\n\tconst dest = file.dest ? file.dest : settings.dest;\n\tconst filePath = join(dest, file.name + (file.ext ? file.ext : ''));\n\tconst data = settings.prependLine\n\t\t? `${settings.prependLine}\\n${file.data}`\n\t\t: file.data;\n\n\ttry {\n\t\tawait makePath(filePath);\n\n\t\tawait writeFile(filePath, data, {\n\t\t\tencoding: 'utf8',\n\t\t\tflag: 'w'\n\t\t});\n\t} catch (err) {\n\t\tconsole.log(err);\n\t\t// blockErrors(['Woops, something happened during writing. ', err]);\n\t}\n};\n/*\n\n\tBuild/Combine the template with the data using EJS \n\n\t*/\n\nexport const CombineTemplateWithData = async (\n\tfile: any,\n\ttemplate: TemplateFileType,\n\tsettings: SettingsType\n): Promise<string> => {\n\treturn render(template.data, {\n\t\t...settings,\n\t\t...file,\n\t\t...helpers,\n\t\tPascalCase,\n\t\tkebabCase,\n\t\tupperSnakeCase: CONST_CASE\n\t});\n};\n\n/*\n\n\tWrite a single Component\n\n\t*/\n\nconst buildComponent = async function (\n\tsettings: SettingsType,\n\tfile: FilesType\n): Promise<void> {\n\tawait asyncForEach(settings.templates, async (template: TemplateFileType) => {\n\t\ttry {\n\t\t\tconst data = await CombineTemplateWithData(file, template, settings);\n\t\t\tconst ext = getExtension(template.file);\n\t\t\tawait writeAFile(settings, {\n\t\t\t\tdata: formatFile(data, ext),\n\t\t\t\text,\n\t\t\t\tname: kebabCase(fileName(file.name)),\n\t\t\t\tdest: settings.dest\n\t\t\t});\n\n\t\t\tblockLineSuccess(\n\t\t\t\t`${file.name}${blue(getExtension(template.file))}${file.style ? ` ${blue('+ style')}` : ''\n\t\t\t\t}`\n\t\t\t);\n\n\t\t\tif (!(!settings.inRoot && settings.parentIndex)) return;\n\n\t\t\tconst indexData = `export * from \"./${file.name}\";`;\n\t\t\tconst indexExt = ['.ts', '.tsx'].includes(ext) ? '.ts' : '.js';\n\n\t\t\tawait writeAFile(settings, {\n\t\t\t\tdata: formatFile(indexData, indexExt),\n\t\t\t\text: indexExt,\n\t\t\t\tname: 'index',\n\t\t\t\tdest: settings.dest\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tblockLineError(`${file.name}${blue(getExtension(template.file))} ${err}`);\n\t\t}\n\t});\n};\n\n/*\n\n\tStart the building process\n\n\t*/\n\nexport const startBuild = async (settings: SettingsType): Promise<void> => {\n\t// Log it all\\\n\n\tblockHeader(`Generating Icons - ${packageJson.version}`);\n\tblockMid(`Settings`);\n\n\tif (settings.src && settings.dest) {\n\t\tconst showSettings = {\n\t\t\tdestination: settings.dest,\n\t\t\tsource: settings.src,\n\t\t\tprefix: settings.prefix,\n\t\t\ttemplate: settings.template ? settings.template : null,\n\t\t\toptimize: settings.optimize,\n\t\t\tremoveOld: settings.removeOld,\n\t\t\tremoveAttrs: settings.removeAttrs,\n\t\t\tremoveTags: settings.removeTags,\n\t\t\tremoveStyle: settings.removeStyle,\n\t\t\tlist: settings.list ? settings.list : defaultSettings.list,\n\t\t\tlistTemplate: settings.listTemplate ? settings.listTemplate : defaultSettings.listTemplate,\n\t\t\tindex: settings.index ? settings.index : defaultSettings.index,\n\t\t\tindexTemplate: settings.indexTemplate ? settings.indexTemplate : defaultSettings.indexTemplate,\n\t\t\ttypes: settings.types ? settings.types : defaultSettings.types,\n\t\t\ttypesTemplate: settings.typesTemplate ? settings.typesTemplate : defaultSettings.typesTemplate,\n\t\t\tparentIndex: settings.parentIndex ? settings.parentIndex : defaultSettings.parentIndex,\n\t\t\ttotalFiles: settings.files.length,\n\t\t\ticonFolder: settings.iconFolder ? settings.iconFolder : defaultSettings.iconFolder,\n\t\t\tinRoot: settings.inRoot ? settings.inRoot : defaultSettings.inRoot,\n\t\t\tfilter: settings.filter ? settings.filter : defaultSettings.filter\n\t\t};\n\n\t\tawait blockSettings(showSettings);\n\n\t\tif (settings.files.length < 1) {\n\t\t\tblockMid(`Warnings`);\n\t\t\tblockRowLine([\n\t\t\t\t'src',\n\t\t\t\t`${yellow().italic(settings.src)} ${red(\"Your source folder doesn't contain any\") +\n\t\t\t\tred().bold(' .svg ') +\n\t\t\t\tred('files.')\n\t\t\t\t}`,\n\t\t\t\t''\n\t\t\t]);\n\t\t}\n\t}\n};\n\nexport const buildComponents = async (\n\tsettings: SettingsType\n): Promise<void> => {\n\tif (settings.files.length > 0) {\n\t\tblockMid(\n\t\t\t`${bold('Files')} ${blue().bold('(' + settings.files.length + ')')}`\n\t\t);\n\n\t\tawait asyncForEach(settings.files, async (file: FilesType) => {\n\t\t\tlet newFolder = join(settings.dest);\n\t\t\tif (settings.iconFolder && !settings.inRoot)\n\t\t\t\tnewFolder = join(\n\t\t\t\t\tsettings.dest,\n\t\t\t\t\tsettings.iconFolder,\n\t\t\t\t\tfileName(file.name)\n\t\t\t\t);\n\t\t\telse if (!settings.inRoot)\n\t\t\t\tnewFolder = join(settings.dest, fileName(file.name));\n\t\t\telse if (settings.iconFolder)\n\t\t\t\tnewFolder = join(settings.dest, settings.iconFolder);\n\n\t\t\tawait createAFolder(newFolder);\n\n\t\t\tbuildComponent({ ...settings, dest: newFolder }, file);\n\t\t});\n\t}\n\tawait WAIT(100);\n};\n\n/*\n\n\tBuild the files!\n\n\t*/\n\nexport const buildFiles = async (\n\tsettings: SettingsType\n): Promise<SettingsType> => {\n\n\tawait startBuild(settings);\n\tawait buildComponents(settings);\n\treturn settings;\n};\n","// @ts-nocheck\nimport yargs from 'yargs';\n\nimport { SettingsType } from '@/types';\n\nexport const defaultSettings: SettingsType = {\n\tsrc: '',\n\tdest: '',\n\tstyleDir: '',\n\toptimize: true,\n\ttemplate: null,\n\tinRoot: false,\n\tcopy: [],\n\tremoveOld: false,\n\tremovePrefix: '',\n\tremoveAffix: '',\n\tremoveString: '',\n\tstripStyle: false,\n\tprefix: '',\n\tlist: false,\n\tlistTemplate: [],\n\ttype: '',\n\tremoveStyle: false,\n\tremoveAttrs: ['fill', 'id', 'class'],\n\tremoveTags: ['svg'],\n\tsvgOnly: false,\n\tindex: false,\n\tindexTemplate: [],\n\ttypes: false,\n\ttypesTemplate: [],\n\tparentIndex: false,\n\tprependLine: '',\n\ticonFolder: '',\n\tfilter: ''\n}\n\nexport const settings = (): SettingsType => {\n\tconst cs = yargs.options({\n\t\tsrc: { required: true, type: 'string', default: defaultSettings.src, alias: 'source' },\n\t\tdest: {\n\t\t\trequired: true,\n\t\t\ttype: 'string',\n\t\t\tdefault: defaultSettings.dest,\n\t\t\talias: 'destination'\n\t\t},\n\t\tsd: { required: true, type: 'string', default: defaultSettings.styleDir, alias: 'styleDir' },\n\t\to: { required: false, type: 'boolean', default: defaultSettings.optimize, alias: 'optimize' },\n\t\tt: { required: false, type: 'string', default: defaultSettings.template, alias: 'template' },\n\t\tp: { required: false, type: 'string', default: defaultSettings.prefix, alias: 'prefix' },\n\t\tc: { required: false, type: 'array', default: defaultSettings.copy, alias: 'copy' },\n\t\tl: {\n\t\t\trequired: false,\n\t\t\ttype: 'boolean',\n\t\t\tdefault: defaultSettings.list,\n\t\t\talias: 'list'\n\t\t},\n\t\tlt: {\n\t\t\trequired: false,\n\t\t\ttype: 'array',\n\t\t\tdefault: defaultSettings.listTemplate,\n\t\t\talias: 'listTemplate'\n\t\t},\n\t\tir: { required: false, type: 'boolean', default: defaultSettings.inRoot, alias: 'inRoot' },\n\t\ttype: {\n\t\t\trequired: false,\n\t\t\ttype: 'string',\n\t\t\tdefault: defaultSettings.type,\n\t\t},\n\t\tra: {\n\t\t\trequired: false,\n\t\t\ttype: 'array',\n\t\t\tdefault: defaultSettings.removeAttrs,\n\t\t\talias: 'removeAttrs'\n\t\t},\n\t\trt: {\n\t\t\trequired: false,\n\t\t\ttype: 'array',\n\t\t\tdefault: defaultSettings.removeTags,\n\t\t\talias: 'removeTags'\n\t\t},\n\t\trs: {\n\t\t\trequired: false,\n\t\t\ttype: 'boolean',\n\t\t\tdefault: defaultSettings.removeStyle,\n\t\t\talias: 'removeStyle'\n\t\t},\n\t\tro: { type: 'boolean', default: defaultSettings.removeOld, alias: 'removeOld' },\n\t\trmPrx: { type: 'string', default: defaultSettings.removePrefix, alias: 'removePrefix' },\n\t\trmAfx: { type: 'string', default: defaultSettings.removeAffix, alias: 'removeAffix' },\n\t\trmStr: { type: 'string', default: defaultSettings.removeString, alias: 'removeString' },\n\t\tss: { type: 'boolean', default: defaultSettings.stripStyle, alias: 'stripStyle' },\n\t\tsvg: { type: 'boolean', default: defaultSettings.svgOnly, alias: 'svgOnly' },\n\t\tidx: {\n\t\t\trequired: false,\n\t\t\ttype: 'boolean',\n\t\t\tdefault: defaultSettings.index,\n\t\t\talias: 'index'\n\t\t},\n\t\tidxt: {\n\t\t\trequired: false,\n\t\t\ttype: 'array',\n\t\t\tdefault: defaultSettings.indexTemplate,\n\t\t\talias: 'indexTemplate'\n\t\t},\n\t\ttps: {\n\t\t\trequired: false,\n\t\t\ttype: 'boolean',\n\t\t\tdefault: defaultSettings.types,\n\t\t\talias: 'types'\n\t\t},\n\t\ttpst: {\n\t\t\trequired: false,\n\t\t\ttype: 'array',\n\t\t\tdefault: defaultSettings.typesTemplate,\n\t\t\talias: 'typesTemplate'\n\t\t},\n\t\tpidx: {\n\t\t\trequired: false,\n\t\t\ttype: 'boolean',\n\t\t\tdefault: defaultSettings.parentIndex,\n\t\t\talias: 'parentIndex'\n\t\t},\n\t\tppl: {\n\t\t\trequired: false,\n\t\t\ttype: 'string',\n\t\t\tdefault: defaultSettings.prependLine,\n\t\t\talias: 'prependLine'\n\t\t},\n\t\tif: {\n\t\t\trequired: false,\n\t\t\ttype: 'string',\n\t\t\tdefault: defaultSettings.iconFolder,\n\t\t\talias: 'iconFolder'\n\t\t},\n\t\tft: {\n\t\t\trequired: false,\n\t\t\ttype: 'string',\n\t\t\tdefault: defaultSettings.filter,\n\t\t\talias: 'filter'\n\t\t}\n\t}).argv;\n\n\n\n\n\treturn {\n\t\tsrc: cs.src,\n\t\tdest: cs.dest,\n\t\tstyleDir: cs.sd,\n\t\toptimize: cs.o,\n\t\ttemplate: cs.t,\n\t\tinRoot: cs.ir,\n\t\tcopy: cs.c,\n\t\tremoveOld: cs.ro,\n\t\tremovePrefix: cs.rmPre,\n\t\tremoveAffix: cs.rmAff,\n\t\tremoveString: cs.rmStr,\n\t\tstripStyle: cs.ss,\n\t\tprefix: cs.p,\n\t\tlist: cs.lt.filter(Boolean).length > 0 ? true : cs.l, // If the listTemplate is set, the list is true otherwise, set the value of list.\n\t\tlistTemplate: cs.lt,\n\t\ttype: cs.type,\n\t\tremoveStyle: cs.rs,\n\t\tremoveAttrs: cs.ra,\n\t\tremoveTags: cs.rt,\n\t\tsvgOnly: cs.svg,\n\t\tindex: cs.idxt.filter(Boolean).length > 0 ? true : cs.idx, // If the indexTemplate is set, the index is true otherwise, set the value of index.\n\t\tindexTemplate: cs.idxt,\n\t\ttypes: cs.tpst.filter(Boolean).length > 0 ? true : cs.tps, // If the indexTemplate is set, the index is true otherwise, set the value of index.\n\t\ttypesTemplate: cs.tpst,\n\t\tparentIndex: cs.pidx,\n\t\tprependLine: cs.ppl,\n\t\ticonFolder: cs.if,\n\t\tfilter: cs.ft\n\t};\n};\n","\nimport { lstat, copyFile } from 'fs/promises';\nimport { basename, join } from 'path';\nimport { blockLineSuccess } from 'cli-block';\n\nimport { asyncForEach } from '@/helpers';\nimport { SettingsType } from '@/types';\n\nexport const copyFiles = async (settings: SettingsType): Promise<void> => {\n\tawait asyncForEach(settings.copy, async (item: string) => {\n\t\tconst baseFile = item.includes('=') ? item.split('=')[0] : item;\n\t\tconst targetFile = item.includes('=') ? item.split('=')[1] : basename(item);\n\n\t\tconst baseStat = await lstat(baseFile);\n\n\t\tif (baseStat.isDirectory()) {\n\t\t\tconst input = join(baseFile);\n\t\t\tconst output = join(\n\t\t\t\tsettings.dest,\n\t\t\t\tbaseFile.split('/')[baseFile.split('/').length - 1]\n\t\t\t);\n\n\t\t\tawait copyFile(input, output);\n\t\t\tblockLineSuccess(`Copied ${targetFile}`);\n\t\t} else {\n\t\t\tconst input = join(baseFile);\n\t\t\tconst output = join(settings.dest, targetFile);\n\t\t\tawait copyFile(input, output);\n\t\t\tblockLineSuccess(`Copied ${targetFile}`);\n\t\t}\n\t});\n};\n","import { basename, join, extname } from 'path';\nimport { blockErrors, blockLineSuccess, blockMid } from 'cli-block';\nimport { PascalCase, kebabCase } from '@sil/case';\nimport { CONST_CASE } from '@/helpers';\nconst { readdir, readFile, lstat } = require('fs').promises;\nimport ejs from 'ejs';\n\nimport { asyncForEach, getExtension, fileName } from '@/helpers';\nimport { SettingsType, TemplateFileType, ListFilesType } from '@/types';\nimport { writeAFile } from '@/build';\n/*\n  When there is no Template given, but a type. The templates will be gotten from the package.\n*/\n\nconst getLocalTemplates = async (dir: string): Promise<TemplateFileType[]> => {\n\tlet templates: any = [];\n\ttry {\n\t\tlet localTemplateDir = await readdir(join(__dirname, dir));\n\n\t\tawait asyncForEach(localTemplateDir, async (template: string) => {\n\t\t\tlet fileData = await readFile(join(__dirname, dir, template));\n\t\t\ttemplates.push({\n\t\t\t\tfile: template,\n\t\t\t\tdata: fileData.toString()\n\t\t\t});\n\t\t});\n\n\t\treturn templates;\n\t} catch (error) {\n\t\tconsole.log(error);\n\t\t// blockErrors([\"Couldn't get the template \", error]);\n\t}\n};\n\nconst getTemplateFiles = async (list): Promise<TemplateFileType[]> => {\n\tlet templates = [];\n\n\tawait asyncForEach(list, async (templateFile) => {\n\t\tconst stats = await lstat(templateFile);\n\t\tif (stats.isDirectory()) {\n\t\t\tlet templateFiles = await readdir(templateFile);\n\n\t\t\ttry {\n\t\t\t\tawait asyncForEach(templateFiles, async (template: string) => {\n\t\t\t\t\tlet fileData = await readFile(join(templateFile, template));\n\n\t\t\t\t\ttemplates.push({\n\t\t\t\t\t\tfile: template,\n\t\t\t\t\t\tdata: fileData.toString()\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\tblockErrors([\"Couldn't get the template \", error, templateFiles]);\n\t\t\t}\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tlet fileData = await readFile(templateFile);\n\t\t\t\ttemplates.push({\n\t\t\t\t\tfile: templateFile,\n\t\t\t\t\tdata: fileData.toString()\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\tblockErrors([\"Couldn't get the template \", error, templateFile]);\n\t\t\t}\n\t\t}\n\t});\n\treturn templates;\n};\n\nexport const getListTemplates = async (\n\tsettings: SettingsType,\n\ttype: string = 'list'\n): Promise<TemplateFileType[]> => {\n\tlet listTemplate = [];\n\tswitch (type) {\n\t\tcase 'list':\n\t\t\tlistTemplate = settings.listTemplate;\n\t\t\tbreak;\n\t\tcase 'index':\n\t\t\tlistTemplate = settings.indexTemplate;\n\t\t\tbreak;\n\t\tcase 'types':\n\t\t\tlistTemplate = settings.typesTemplate;\n\t\t\tbreak;\n\t}\n\n\tif (listTemplate[0] == null || listTemplate.length < 1) {\n\t\tconst templateDir = `../src/templates/${type}`;\n\t\treturn await getLocalTemplates(templateDir);\n\t}\n\n\treturn await getTemplateFiles(listTemplate);\n};\n\nexport const buildLists = async (\n\tsettings: SettingsType,\n\ttemplates: TemplateFileType[]\n): Promise<ListFilesType[]> => {\n\tlet files = [];\n\n\ttry {\n\t\tawait asyncForEach(templates, (template) => {\n\t\t\tfiles.push({\n\t\t\t\tname: fileName(template.file),\n\t\t\t\text: getExtension(template.file),\n\t\t\t\tdata: ejs.render(template.data, {\n\t\t\t\t\t...settings,\n\t\t\t\t\tPascalCase,\n\t\t\t\t\tkebabCase,\n\t\t\t\t\tupperSnakeCase: CONST_CASE\n\t\t\t\t})\n\t\t\t});\n\t\t});\n\t} catch (error) {\n\t\tconsole.warn(error);\n\t}\n\treturn files;\n};\n\nexport const writeLists = async (\n\tsettings: SettingsType,\n\tlists: ListFilesType[]\n): Promise<void> => {\n\tawait asyncForEach(lists, async (file) => {\n\t\t// console.log(file);\n\t\tawait writeAFile(settings, {\n\t\t\t...file,\n\t\t\tname: basename(file.name).replace(extname(file.name), '')\n\t\t});\n\t\tblockLineSuccess(file.name);\n\t});\n};\n\nexport const createListType = async (\n\tsettings: SettingsType,\n\ttype: string = 'list'\n): Promise<void> => {\n\tif (!settings[type]) return;\n\n\tblockMid(type);\n\n\tconst templates = await getListTemplates(settings, type);\n\tconst files = await buildLists(settings, templates);\n\tawait writeLists(settings, files);\n};\n\n// export const createLists = async (settings: SettingsType): Promise<void> => {\n// \tif (!settings.list) return;\n\n// \tblockMid('Lists');\n\n// \tsettings.inRoot = true;\n\n// \tconst templates = await getListTemplates(settings);\n// \tconst files = await buildLists(settings, templates);\n// \tawait writeLists(settings, files);\n// };\n\n// export const createIndexes = async (settings: SettingsType): Promise<void> => {\n// \tif (!settings.index) return;\n\n// \tblockMid('Indexes');\n\n// \tsettings.inRoot = true;\n\n// \tconst templates = await getIndexTemplates(settings);\n// \tconst files = await buildLists(settings, templates);\n// \tawait writeLists(settings, files);\n// };\n\n// export const createTypes = async (settings: SettingsType): Promise<void> => {\n// \tif (!settings.types) return;\n\n// \tblockMid('Types');\n\n// \tsettings.inRoot = true;\n\n// \tconst templates = await getTypesTemplates(settings);\n// \tconst files = await buildLists(settings, templates);\n// \tawait writeLists(settings, files);\n// };\n"],"mappings":"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","names":["require_package","__commonJSMin","exports","module","rimraf","blockFooter","join","basename","extname","blockLineError","kebabCase","PascalCase","join","extname","kebabCase","helpers_exports","__export","CONST_CASE","WAIT","asyncForEach","asyncRemoveAttrs","asyncRemoveTags","createAFolder","dirExist","fileName","fixJsx","formatFile","getAttrData","getExtension","getTagData","prefixedName","removeAttrs","removeFix","removeStyle","removeTags","svgOnly","path","existsSync","format","kebabCase","upperSnakeCase","mkdir","WAIT","time","resolve","asyncForEach","array","callback","index","fileName","str","settings","tagsRegex","tag","removeTags","tags","asyncRemoveTags","attrRegex","attr","removeAttrs","attrs","asyncRemoveAttrs","removeStyle","svgOnly","prefixedName","name","prefix","getExtension","file","names","fixJsx","createAFolder","dir","getTagData","regex","matches","getAttrData","formatFile","ext","parserFormat","dirExist","CONST_CASE","ConvertedString","removeFix","fs","getStyleData","settings","name","filedata","tagData","getTagData","cssFile","style","getStyleFileList","fileDirectory","dirExist","files","filelist","asyncForEach","file","extname","fileData","join","f","removeFix","kebabCase","fileName","getStyles","styles","result","err","path","fs","getFileTemplates","settings","templates","templateFiles","asyncForEach","template","fileData","path","fs","getData","settings","getStyles","getFiles","files","getFileList","result","templates","getFileTemplates","file","err","getFileData","filedata","srcFileName","join","getSizes","viewBox","getAttrData","blockLineError","filelist","asyncForEach","extname","fileData","svgOnly","fileData__clean_attrs","asyncRemoveAttrs","fileData__clean_tags","asyncRemoveTags","fileData__clean_both","name","removeFix","kebabCase","fileName","style","getStyleData","width","height","PascalCase","basename","prefixedName","removeStyle","join","dirname","render","kebabCase","PascalCase","red","yellow","blue","bold","blockHeader","blockLineError","blockLineSuccess","blockMid","blockRowLine","blockSettings","yargs","defaultSettings","settings","cs","mkdir","stat","writeFile","packageJson","makePath","filePath","directoryName","dirname","writeAFile","settings","file","dest","join","data","err","CombineTemplateWithData","template","render","helpers_exports","PascalCase","kebabCase","CONST_CASE","buildComponent","asyncForEach","ext","getExtension","formatFile","fileName","blockLineSuccess","blue","indexData","indexExt","blockLineError","startBuild","blockHeader","blockMid","showSettings","defaultSettings","blockSettings","blockRowLine","yellow","red","buildComponents","bold","newFolder","createAFolder","WAIT","buildFiles","lstat","copyFile","basename","join","blockLineSuccess","copyFiles","settings","asyncForEach","item","baseFile","targetFile","basename","lstat","input","join","output","copyFile","blockLineSuccess","basename","join","extname","blockErrors","blockLineSuccess","blockMid","PascalCase","kebabCase","ejs","readdir","readFile","lstat","getLocalTemplates","dir","templates","localTemplateDir","join","asyncForEach","template","fileData","error","getTemplateFiles","list","templateFile","templateFiles","blockErrors","getListTemplates","settings","type","listTemplate","templateDir","buildLists","files","fileName","getExtension","ejs","PascalCase","kebabCase","CONST_CASE","writeLists","lists","file","writeAFile","basename","extname","blockLineSuccess","createListType","blockMid","getData","settings","buildFiles","s","createListType","copyFiles","blockFooter"]}